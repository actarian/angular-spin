// posts.component.ts

import { AfterViewInit, Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { BehaviorSubject, fromEvent } from 'rxjs';
import { DisposableComponent } from '../../core/disposable/disposable.component';
import { Destination } from '../../models/destination';

@Component({
	selector: 'destination-hint',
	templateUrl: './destination-hint.component.html',
	styleUrls: ['./destination-hint.component.scss']
})
export class DestinationHintComponent extends DisposableComponent implements OnInit, OnChanges, AfterViewInit {

	private _data = new BehaviorSubject<Destination[]>([]);
	@Input()
	get data() {
		return this._data.getValue();
	}
	set data(value) {
		this._data.next(value);
	}

	@Input()
	destinations: Destination[];

	@Input()
	query: string;

	visibleItems: number = 30;

	@ViewChild('ul') ul;
	ul$;

	ngOnInit() {
		this._data.subscribe(x => {
			this.destinations = this.data;
		});
	}

	ngOnChanges(changes: SimpleChanges) {
		if (changes['destinations']) {
			console.log('DestinationHintComponent.ngOnChanges', this.destinations);
			this.visibleItems = 30;
		}
	}

	ngAfterViewInit() {
		this.ul$ = fromEvent(this.ul.nativeElement, 'keyup')
			.debounceTime(250)
			.map((x: any) => {
				return x.target.value;
			});
		this.ul$
			.takeUntil(this.unsubscribe)
			.subscribe(x => {
				console.log('DestinationHintComponent', x);
			});
	}

}
